@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject UserService userService
@inject NavigationManager navigationManager

<div class="login-overlay">

    <EditForm Model="Model" OnValidSubmit="Authenticate" FormName="LoginForm">
        <DataAnnotationsValidator />
        <FluentCard Width="400px" Height="400px" style="display:flex;align-items:center;justify-content:center;flex-direction:column ;gap:1rem">
            <h2 class="fs-4 m-0 p-0">Navami Login</h2>
            <p class="text-danger fs-6">@errorMessage</p>
            <div class="w-100 px-4">
                <label for="">Username</label>
                <InputText @bind-Value="Model.Username" id="username" class="form-control w-100" placeholder="Enter username" />
            </div>
            <div class="w-100 px-4">
                <label for="">Password</label>
                <InputText @bind-Value="Model.Password" id="password" type="password" class="form-control w-100" placeholder="Enter password" />
            </div>
       @*       <p class="text-danger fs-6">@errorMessage</p>
             <div class="w-100  px-4">
                 <FluentTextField @bind-Value=Model.Username Label="Username" class="w-100" Placeholder="Enter username" id="username"></FluentTextField>

             </div>
             <div class="w-100 px-4">
                 <FluentTextField @bind-Value=Model.Password Label="Password" TextFieldType="TextFieldType.Password" Placeholder="Enter password" class="w-100" id="password"></FluentTextField>
             </div> *@
            <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit" Class="w-100 px-4">Login</FluentButton>

        </FluentCard>
    </EditForm>

</div>



@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    public LoginModel Model { get; set; } = default!;
    private string? errorMessage;


    protected override void OnInitialized()
    {
        Model ??= new();
    }    

    private async Task Authenticate()
    {
        var user = await userService.LoginUserAsync(Model);
        if (user.Data != null)
        {
            var username = user.Data.Username ?? throw new ArgumentNullException(nameof(user.Data.Username), "Username cannot be null.");
            var role = user.Data.Role ?? throw new ArgumentNullException(nameof(user.Data.Role), "Role cannot be null.");
            var userId = user.Data.UserId.ToString() ?? throw new ArgumentNullException(nameof(user.Data.UserId), "UserId cannot be null.");

            var claims = new List<Claim>
    {
        new Claim(ClaimTypes.Name, username),
        new Claim(ClaimTypes.Role, role),
        new Claim(ClaimTypes.NameIdentifier, userId)
    };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            if (httpContext != null)
            {
                await httpContext.SignInAsync(principal);
                navigationManager.NavigateTo("/");
            }
        }
        else
        {
            errorMessage = user.ErrorMessage;
        }
    }

}
