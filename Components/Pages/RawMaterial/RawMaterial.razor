@page "/rawmaterial"


@using Microsoft.FluentUI.AspNetCore.Components
@using navami.Services
@using navami.Models
@inject IToastService ToastService
@inject NavigationManager navigationManager
@inject RawMaterialService rawMaterialService
@rendermode InteractiveServer


<PageTitle>Raw Material</PageTitle>
<FluentCard Width="100%" Height="600px">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fs-4">Raw Material</h3>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="@AddCategory">
            Add
        </FluentButton>
    </div>

    @if (rawMaterialList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="d-flex justify-content-end align-items-center mb-1">
            <FluentSearch Placeholder="Search users..." Icon="Search" IconPosition="IconPosition.Start"
                @bind-Value=searchTerm @bind-Value:after=SearchRawMaterial Immediate=true />
        </div>
        <div style="height: 450px; overflow:auto;" class="border rounded">
            <FluentDataGrid Items="@rawMaterialList" GenerateHeader="GenerateHeaderOption.Sticky" Virtualize="true"
                ItemSize="43">
                <PropertyColumn Property="@(c=>c.Rmcode)" Sortable="true" title="Code" />
                <PropertyColumn Property="@(c=>c.Rmname)" Sortable="true" title="Raw Material" />
                <PropertyColumn Property="@(c=>c.Price)" Sortable="true" title="Price" />
                <PropertyColumn Property="@(c=>c.Party)" Sortable="true" title="Vendor" />
                <PropertyColumn Property="@(c=>c.Description)" Sortable="true" title="Description" />
                <PropertyColumn Property="@(c=>c.SpecificationNo)" Sortable="true" title="Specification" />
                <PropertyColumn Property="@(c=>c.CategoryName)" Sortable="true" title="Category" />
                <PropertyColumn Property="@(c=>c.SubCategoryName)" Sortable="true" title="Sub Category" />



                @* Actions *@
                <TemplateColumn Title="Actions" Align="@Align.End">
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                        OnClick="@(()=>EditRawMaterial(context) )" />
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                        OnClick="@(() => DeleteRecipeCategory(context))" />
                </TemplateColumn>
            </FluentDataGrid>
        </div>

    }
</FluentCard>


@code {
    private IQueryable<RmmasterDto> rawMaterialList;
    private IQueryable<RmmasterDto> originalRawMaterialList;

    string errorMessage = string.Empty;
    string searchTerm = string.Empty;
    protected override void OnInitialized()
    {
        var response = rawMaterialService.GetAllRawMaterials();
        if (response.Success)
        {
            rawMaterialList = response.Data.AsQueryable();
            originalRawMaterialList = rawMaterialList;
        }
        else
        {
            errorMessage = response.ErrorMessage;
            ToastService.ShowError(errorMessage);
        }
    }


    private void AddCategory()
    {
        navigationManager.NavigateTo("/rawmaterial/add");
    }

    private void EditRawMaterial(RmmasterDto rawMaterial)
    {
        navigationManager.NavigateTo($"/rawmaterial/edit/{rawMaterial.Rmid}");
    }

    private void SearchRawMaterial()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            rawMaterialList = originalRawMaterialList;
        }
        else
        {
            rawMaterialList = originalRawMaterialList.Where(c => c.Rmname.Contains(searchTerm));
        }
    }

    private void DeleteRecipeCategory(RmmasterDto rawMaterial)
    {
        var response = rawMaterialService.DeleteRawMaterial(rawMaterial.Rmid);
        if (response.Success)
        {
            ToastService.ShowSuccess("Raw Material deleted successfully");
            rawMaterialList = rawMaterialList.Where(c => c.Rmid != rawMaterial.Rmid);
        }
        else
        {
            errorMessage = response.ErrorMessage;
            ToastService.ShowError(errorMessage);
        }
    }
}