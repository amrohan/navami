@page "/rawmaterial/add"
@page "/rawmaterial/edit/{RmId:int}"

@attribute [Authorize(Roles = "Admin")]

@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender:false))


@using System.Security.Claims
@inject IToastService ToastService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RawMaterialService rawMaterialService
@inject CategoryMasterService categoryService
@inject SubCategoryMasterService subCategoryService
@inject VendorMasterService vendorMasterService

<FluentCard Width="100%" Height="410px" AreaRestricted="false" style="box-shadow: none;">

    <div class="d-flex justify-content-between align-items-center">
        <h3 class="fs-5">@(rawMaterial.RawMaterialId != 0 ? "Update " : "Add ") Raw Material</h3>
    </div>

    <div class="container text-start">
        <div class="row row-cols-3 align-content-center my-2">
            <div class="col mt-2">
                <FluentTextField @bind-Value=rawMaterial.RawMaterialCode Label="Code" Placeholder="Enter raw material code"
                                 Class="w-100" />
            </div>
            <div class="col mt-2">
                <FluentTextField @bind-Value=rawMaterial.RawMaterialName Label="Raw Material" Placeholder="Enter raw material"
                                 Class="w-100" />
            </div>
            <div class="col mt-2">
                <FluentNumberField @bind-Value=rawMaterial.Price Label="Price" Placeholder="Enter raw material price"
                                   Class="w-100" @oninput="@(e => HandlePriceInput(e))" />
            </div>
            <div class="col mt-2">
                <FluentTextField @bind-Value=rawMaterial.Party Label="Vendor name" Placeholder="Enter vendor name"
                                 Class="w-100" />
            </div>
            <div class="col mt-2">
                <FluentSelect Height="300px" TOption="CategoryDto" Items="@categoryList"
                              @bind-Value="rawMaterial.CategoryName" Label="Category" Placeholder="Select Category"
                              OptionText="@(c => c.CategoryName)" OptionValue="@(c =>c.CategoryName)" Class="w-100"
                              @onchange="OnCategoryChange" />
            </div>
            <div class="col mt-2">
                <FluentSelect Height="300px" TOption="SubCategoryDto" Items="@subCategoryList"
                              @bind-Value="rawMaterial.SubCategoryName" Label="Sub Category" Placeholder="Select Sub Category"
                              OptionText="@(c => c.SubCategoryName)" OptionValue="@(c =>c.SubCategoryName)" Class="w-100" />
            </div>
            <div class="col-sm-8 mt-2">
                <FluentTextArea @bind-Value=rawMaterial.Description Label="Description" Placeholder="Enter description"
                                Class="w-100" />
            </div>
            <div class="col mt-2">
                <FluentTextArea @bind-Value=rawMaterial.SpecificationNo Label="Specificiation"
                                Placeholder="Enter specification no..." Class="w-100" />
            </div>
            <div class="col d-flex align-content-center align-items-end mt-4">
                <div class="col d-flex justify-content-start align-items-end">
                    <FluentSwitch @bind-Value=rawMaterial.IsNew Label="New Rm" Class="mb-1" Disabled=!canAccess />
                </div>
                <div class="col d-flex justify-content-start align-items-end">
                    <FluentSwitch @bind-Value=rawMaterial.IsDiscontinued Label="Discontinued" Class="mb-1" Disabled=!canAccess />
                </div>
            </div>
        </div>
        <div class="col d-flex justify-content-between align-items-start w-100 mt-2">
            <p class="text-danger" style="font-size: small; margin-left: 1rem; margin-top: 0.5rem;">@errorMessage</p>
            <FluentButton Loading="@isLoading" Appearance="Appearance.Accent" OnClick="@OnAddRawMaterial">
                @(rawMaterial.RawMaterialId == 0 ? "Add" : "Update")
            </FluentButton>
        </div>
    </div>

</FluentCard>

@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; } = default!;
    [Parameter]
    public int RmId { get; set; }

    private RawMaterialsDto rawMaterial = new RawMaterialsDto();
    private List<CategoryDto> categoryList = new List<CategoryDto>();
    private List<SubCategoryDto> subCategoryList = new List<SubCategoryDto>();
    private List<VendorMasterDto> vendorList = new List<VendorMasterDto>();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private bool canAccess = false;

    protected override async Task OnInitializedAsync()

    {
        var user = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User;
        var userRole = user?.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
        if (userRole == "Admin")
        {
            canAccess = true;
        }
        else
        {
            canAccess = false;
            rawMaterial.IsNew = true;
        }


        await LoadCategoryDataAsync();
        await LoadVendorDataAsync();
        await LoadSubCategoryDataAsync();

        if (RmId != 0)
        {
            await LoadRawMaterialDataAsync(RmId);
        }
    }

    private void OnAddRawMaterial()
    {
        try
        {
            isLoading = true;
            var user = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User;
            var userId = user?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            if (userId == null)
            {
                errorMessage = "User not found";
                isLoading = false;
                return;
            }

            rawMaterial.AddedBy = int.Parse(userId);
            rawMaterial.AddedOn = DateTime.Now;

            var category = categoryList.FirstOrDefault(c => c.CategoryName == rawMaterial.CategoryName);
            if (category == null)
            {
                errorMessage = "Category not found";
                isLoading = false;
                return;
            }
            rawMaterial.CategoryId = category.CategoryId;

            var subCategory = subCategoryList.FirstOrDefault(c => c.SubCategoryName == rawMaterial.SubCategoryName);
            if (subCategory == null)
            {
                errorMessage = "SubCategory not found";
                isLoading = false;
                return;
            }
            rawMaterial.SubCategoryId = subCategory.SubCategoryId;


            ApiResponse<RawMaterialsDto> response;
            if (rawMaterial.RawMaterialId == 0)
            {
                response = rawMaterialService.AddRawMaterial(rawMaterial);
            }
            else
            {
                response = rawMaterialService.UpdateRawMaterial(rawMaterial);
            }

            if (response.Success)
            {
                ToastService.ShowSuccess(rawMaterial.RawMaterialId == 0
                ? "Raw Material added successfully"
                : "Raw Material updated successfully");

                navigationManager.NavigateTo("/rawmaterial");

            }
            else
            {
                errorMessage = response.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            // Log the exception or handle it accordingly
            errorMessage = ex.Message;
            ToastService.ShowError(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }


    private void OnCategoryChange(ChangeEventArgs e)
    {
        try
        {
            if (e.Value == null)
            {
                return;
            }

            var category = e.Value.ToString();
            var categoryItem = categoryList.FirstOrDefault(c => c.CategoryName == category);

            if (categoryItem == null)
            {
                return;
            }

            var categoryId = categoryItem.CategoryId;
            var response = subCategoryService.GetSubCategoryMasterByCategory(categoryId);

            if (response.Success)
            {
                subCategoryList = response.Data;
            }
            else
            {
                errorMessage = response.ErrorMessage;
                ToastService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            ToastService.ShowError(errorMessage);
        }
    }


    private async Task LoadCategoryDataAsync()
    {
        var response = await categoryService.GetCategoryMasterAsync();
        if (response.Success)
        {
            categoryList = response.Data;
        }
    }

    private async Task LoadVendorDataAsync()
    {
        var responseVendor = await vendorMasterService.GetVendorMasterAsync();
        if (responseVendor.Success)
        {
            vendorList = responseVendor.Data;
        }
    }

    private async Task LoadSubCategoryDataAsync()
    {
        var responseSubCategory = await subCategoryService.GetSubCategoryMasterAsync();
        if (responseSubCategory.Success)
        {
            subCategoryList = responseSubCategory.Data;
        }
    }

    private async Task LoadRawMaterialDataAsync(int rmId)
    {
        isLoading = true;
        var responseRawMaterial = await rawMaterialService.GetRawMaterialByIdAsync(rmId);

        if (responseRawMaterial.Success)
        {
            rawMaterial = responseRawMaterial.Data;
        }

        isLoading = false;
    }

    private void HandlePriceInput(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out decimal price))
        {
            rawMaterial.Price = price;
        }
     
    }

}
