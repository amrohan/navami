@page "/vendor"

@using Microsoft.FluentUI.AspNetCore.Components
@using navami.Services
@using navami.Models
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject VendorMasterService vendorService


@rendermode InteractiveServer


<FluentCard Width="100%" Height="600px">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fs-4">Vendor</h3>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="@AddVendor">
            Add
        </FluentButton>
    </div>

    @if (vendor == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <div class="d-flex justify-content-end align-items-center mb-1">
            <FluentSearch Placeholder="Search users..." Icon="Search" IconPosition="IconPosition.Start"
                @bind-Value=searchTerm @bind-Value:after=SearchVendor Immediate=true />
        </div>
        <div class="border rounded" style="height: 450px; overflow:auto;">
            <FluentDataGrid Items="@vendor" GenerateHeader="GenerateHeaderOption.Sticky" Virtualize="true" ItemSize="43">
                <PropertyColumn Property="@(c => c.VendorName)" Sortable="true" title="Vendor Name" />
                <TemplateColumn Title="Actions" Align="@Align.End">
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                        OnClick="@(() => EditVendor(context))" />
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                        OnClick="@(() => DeleteVendor(context))" />
                </TemplateColumn>
            </FluentDataGrid>
        </div>
    }

</FluentCard>


@code {
    private IQueryable<VendorMasterDto> vendor;
    private IQueryable<VendorMasterDto> originalVendor;
    string errorMessage = string.Empty;
    string searchTerm = string.Empty;
    protected override void OnInitialized()
    {
        var response = vendorService.GetVendorMaster();
        if (response.Success)
        {
            vendor = response.Data.AsQueryable();
            originalVendor = vendor;
        }
        else
        {
            errorMessage = response.ErrorMessage;
        }
    }

    private void AddVendor()
    {
        NavigationManager.NavigateTo("/vendor/add");
    }

    private void SearchVendor()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            vendor = originalVendor;
        }
        else
        {
            vendor = originalVendor.Where(c => c.VendorName.Contains(searchTerm));
        }
    }

    private void EditVendor(VendorMasterDto vendor)
    {
        NavigationManager.NavigateTo($"/vendor/edit/{vendor.VendorId}");
    }

    private void DeleteVendor(VendorMasterDto context)
    {
        var response = vendorService.DeleteVendorMaster(context.VendorId);
        if (response.Success)
        {
            vendor = vendor.Where(c => c.VendorId != context.VendorId).AsQueryable();
            ToastService.ShowSuccess("Vendor deleted successfully");
        }
        else
        {
            ToastService.ShowError(response.ErrorMessage);
        }
    }
}