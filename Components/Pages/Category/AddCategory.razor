@page "/category/add"
@page "/category/edit/{CategoryId:int}"
@using System.Security.Claims

@rendermode InteractiveServer
@inject CategoryMasterServie categoryMasterService
@inject IToastService ToastService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<FluentCard Width="100%" Height="200px">

    <div class="d-flex justify-content-between align-items-center">
        <h3 class="fs-5">@(category.CategoryId != 0 ? "Update Category" : "Add Category")</h3>
    </div>

    <div class="container mt-2">
        <div class="row row-cols-1 align-content-center justify-content-start">
            <div class="w-50">
                <FluentTextField @bind-Value=category.CategoryName Label="Category Name"
                    Placeholder="Enter recipe category name" Class="w-100">
                </FluentTextField>
            </div>

            <div class="d-flex justify-content-start align-items-center ml-4">

                <FluentButton Loading="@isLoading" Appearance="Appearance.Accent" OnClick="@AddCategoryMaster">
                    @(category.CategoryId != 0 ? "Update" : "Add")
                </FluentButton>
            </div>
        </div>
    </div>
</FluentCard>


@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; } = default!;
    [Parameter]
    public int CategoryId { get; set; }
    private CategoryMasterDto category = new CategoryMasterDto();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        if (CategoryId != 0)
        {
            var response = categoryMasterService.GetCategoryMasterById(CategoryId);
            if (response.Success)
            {
                category = response.Data;
            }
            else
            {
                errorMessage = response.ErrorMessage;
            }
        }
    }

    private void AddCategoryMaster()
    {
        isLoading = true;
        var user = AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User;
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        ApiResponse<CategoryMasterDto> response;
        if (userId == null)
        {
            errorMessage = "User not found";
            ToastService.ShowError("User not found");
            isLoading = false;
            return;
        }
        category.CreatedBy = userId;
        category.UpdatedBy = userId;

        if (category.CategoryId != 0)
        {
            category.UpdatedDate = DateTime.UtcNow.ToString();
            response = categoryMasterService.UpdateCategoryMaster(category);

            if (response.Success)
            {
                ToastService.ShowSuccess("Recipe Category updated successfully");
            }
            else
            {
                errorMessage = response.ErrorMessage;
                ToastService.ShowError(response.ErrorMessage);
            }
            isLoading = false;
            return;
        }

        response = categoryMasterService.AddCategoryMaster(category);
        if (response.Success)
        {
            ToastService.ShowSuccess("Recipe Category added successfully");
        }
        else
        {
            errorMessage = response.ErrorMessage;
        }
        isLoading = false;

    }





}
