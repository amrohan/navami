@page "/category"

@attribute [Authorize(Roles = "Admin")]

@using Microsoft.FluentUI.AspNetCore.Components
@using navami.Services
@using navami.Models
@inject IToastService ToastService
@inject NavigationManager navigationManager
@inject CategoryMasterService categoryMasterService

@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(prerender:false))


<PageTitle>Category</PageTitle>
<FluentCard Width="100%" Height="600px" style="box-shadow: none;">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fs-5">Category</h3>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="@AddCategory">
            Add
        </FluentButton>
    </div>
    <div class="d-flex justify-content-end align-items-center mb-1">
        <FluentSearch Placeholder="Search category..." Icon="Search" IconPosition="IconPosition.Start"
            @bind-Value=searchTerm @bind-Value:after=SearchCategory Immediate=true />
    </div>

    @if (categoryList == null)
    {
            <TableLoader />
    }
    else
    {
        <div style="height: 450px; overflow:auto;" class="border rounded">
            <FluentDataGrid Items="@categoryList" GenerateHeader="GenerateHeaderOption.Sticky" Virtualize="true"
                            ItemSize="43">
                <TemplateColumn Title="Actions" Align="@Align.Start" Width="100px">
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                                  OnClick="@(() => HandleDelete(context))" />
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                                  OnClick="@(()=>EditCategory(context) )" />
                </TemplateColumn>
                <PropertyColumn Property="@(c=>c.CategoryName)" Sortable="true" title="Recipe Category" />

            </FluentDataGrid>
        </div>


    }

</FluentCard>

<ConfirmDialog ConfirmationChanged="@HandleConfirmation" ShowDialog="@showDialog" />



@code {
    private IQueryable<CategoryDto> categoryList;
    private IQueryable<CategoryDto> originalCategoryList;

    string errorMessage = string.Empty;
    string searchTerm = string.Empty;
    CategoryDto ctx = new CategoryDto();
    bool showDialog = false;

    protected override async Task OnInitializedAsync()
    {
        await loadCategory();

    }

    private void AddCategory()
    {
        navigationManager.NavigateTo("/category/add");
    }

    private void EditCategory(CategoryDto context)
    {
        navigationManager.NavigateTo($"/category/edit/{context.CategoryId}");
    }

    private void DeleteRecipeCategory(CategoryDto context)
    {
        var response = categoryMasterService.DeleteCategoryMaster(context.CategoryId);
        if (response.Success)
        {
            categoryList = categoryList.Where(c => c.CategoryId != context.CategoryId).AsQueryable();
            ToastService.ShowSuccess("Category deleted successfully");
        }
        else
        {
            ToastService.ShowError(response.ErrorMessage);
        }
    }


    private void SearchCategory()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            categoryList = originalCategoryList;
        }
        else
        {
            categoryList = originalCategoryList.Where(c => c.CategoryName.ToLower().Contains(searchTerm.ToLower())).AsQueryable();
        }
    }

    private async Task loadCategory()
    {
        var response = await categoryMasterService.GetCategoryMasterAsync();
        if (response.Success)
        {
            categoryList = response.Data.AsQueryable();
            originalCategoryList = categoryList;
        }
        else
        {
            errorMessage = response.ErrorMessage;
        }
    }

    private void HandleDelete(CategoryDto categoryDto)
    {
        ctx = categoryDto;
        showDialog = true;
    }

    private void HandleConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            DeleteRecipeCategory(ctx);
            showDialog = false;
        }
        else
        {
            showDialog = false;
        }
    }

}
