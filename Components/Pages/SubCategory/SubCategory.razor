@page "/subcategory"

@using Microsoft.FluentUI.AspNetCore.Components
@using navami.Services
@using navami.Models
@inject IToastService ToastService
@inject NavigationManager navigationManager
@inject SubCategoryMasterService subCategoryMasterService

@rendermode InteractiveServer


<PageTitle>Sub Category</PageTitle>
<FluentCard Width="100%" Height="500px">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fs-4">Sub Category</h3>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())"
            OnClick="@AddSubCategory">
            Add
        </FluentButton>
    </div>

    @if (categoryList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="d-flex justify-content-end align-items-center mb-1">
            <FluentSearch Placeholder="Search sub category..." Icon="Search" IconPosition="IconPosition.Start"
                @bind-Value=searchTerm @bind-Value:after=SearchSubCategory Immediate=true />
        </div>
        <FluentDataGrid Items="@categoryList" GenerateHeader="GenerateHeaderOption.Sticky">
            <PropertyColumn Property="@(c => c.SubCategoryName)" Sortable="true" title="Sub Category" />
            <PropertyColumn Property="@(c => c.CategoryName)" Sortable="true" title="Category" />
            <TemplateColumn Title="Actions" Align="@Align.End">
                <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                    OnClick="@(() => EditSubCategory(context))" />
                <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                    OnClick="@(() => DeleteSubCategory(context))" />
            </TemplateColumn>
        </FluentDataGrid>


    }
</FluentCard>


@code {
    // categoryList
    private IQueryable<SubCategoryMasterDto> categoryList;
    private IQueryable<SubCategoryMasterDto> originalCategoryList;

    string errorMessage = string.Empty;
    string searchTerm = string.Empty;
    protected override void OnInitialized()
    {
        var response = subCategoryMasterService.GetSubCategoryMaster();
        if (response.Success)
        {
            categoryList = response.Data.AsQueryable();
            originalCategoryList = categoryList;
        }
        else
        {
            ToastService.ShowError(response.ErrorMessage);
            errorMessage = response.ErrorMessage;
        }
    }

    private void AddSubCategory()
    {
        navigationManager.NavigateTo("/subcategory/add");
    }

    private void EditSubCategory(SubCategoryMasterDto context)
    {
        navigationManager.NavigateTo($"/subcategory/edit/{context.SubCategoryId}");
    }

    private void DeleteSubCategory(SubCategoryMasterDto context)
    {
        var response = subCategoryMasterService.DeleteSubCategoryMaster(context.SubCategoryId);
        if (response.Success)
        {
            ToastService.ShowSuccess("Sub Category deleted successfully");

        }
        else
        {
            ToastService.ShowError(response.ErrorMessage);
        }
    }

    private void SearchSubCategory()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            categoryList = originalCategoryList;
        }
        else
        {
            categoryList = originalCategoryList.Where(c => c.SubCategoryName.Contains(searchTerm,
            StringComparison.OrdinalIgnoreCase));
        }
    }
}
