@page "/subcategory"

@attribute [Authorize(Roles = "Admin")]

@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@using Microsoft.FluentUI.AspNetCore.Components
@using navami.Services
@using navami.Models
@inject IToastService ToastService
@inject NavigationManager navigationManager
@inject SubCategoryMasterService subCategoryMasterService





<PageTitle>Sub Category</PageTitle>
<FluentCard Width="100%" Height="600px" style="box-shadow: none;">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fs-5">Sub Category</h3>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())"
            OnClick="@AddSubCategory">
            Add
        </FluentButton>
    </div>
    <div class="d-flex justify-content-end align-items-center mb-1">
        <FluentSearch Placeholder="Search sub category..." Icon="Search" IconPosition="IconPosition.Start"
            @bind-Value=searchTerm @bind-Value:after=SearchSubCategory Immediate=true />
    </div>
    @if (categoryList == null)
    {
        <TableLoader />
    }
    else
    {

        <div class="border rounded" style="height: 450px; overflow:auto;">
            <FluentDataGrid Items="@categoryList" GenerateHeader="GenerateHeaderOption.Sticky">
                <TemplateColumn Title="Actions" Align="@Align.Start" Width="100px">
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                                  OnClick="@(() => DeleteSubCategory(context))" />
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                                  OnClick="@(() => EditSubCategory(context))" />
                </TemplateColumn>
                <PropertyColumn Property="@(c => c.SubCategoryName)" Sortable="true" title="Sub Category" />
                <PropertyColumn Property="@(c => c.CategoryName)" Sortable="true" title="Category" />

            </FluentDataGrid>
        </div>


    }
</FluentCard>


@code {
    // categoryList
    private IQueryable<SubCategoryDto> categoryList;
    private IQueryable<SubCategoryDto> originalCategoryList;

    string errorMessage = string.Empty;
    string searchTerm = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await LoadSubCategoryDataAsync();
    }

    private void AddSubCategory()
    {
        navigationManager.NavigateTo("/subcategory/add");
    }

    private void EditSubCategory(SubCategoryDto context)
    {
        navigationManager.NavigateTo($"/subcategory/edit/{context.SubCategoryId}");
    }

    private void DeleteSubCategory(SubCategoryDto context)
    {
        var response = subCategoryMasterService.DeleteSubCategoryMaster(context.SubCategoryId);
        if (response.Success)
        {
            ToastService.ShowSuccess("Sub Category deleted successfully");

        }
        else
        {
            ToastService.ShowError(response.ErrorMessage);
        }
    }

    private void SearchSubCategory()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            categoryList = originalCategoryList;
        }
        else
        {
            categoryList = originalCategoryList.Where(c => c.SubCategoryName.Contains(searchTerm,
            StringComparison.OrdinalIgnoreCase));
        }
    }

    //loadsubCategory
    private async Task LoadSubCategoryDataAsync()
    {
        var response = await subCategoryMasterService.GetSubCategoryMasterAsync();
        if (response.Success)
        {
            categoryList = response.Data.AsQueryable();
            originalCategoryList = categoryList;
        }
        else
        {
            errorMessage = response.ErrorMessage;
            ToastService.ShowError(errorMessage);
        }
    }
}
