@page "/recipe"

@attribute [Authorize]

@inject RecipeMasterService recipeMasterService
@inject NavigationManager navigationManager
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(prerender:false))



<PageTitle>Sub Category</PageTitle>
<FluentCard Width="100%" Height="600px" style="box-shadow: none;">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fs-5">Recipe</h3>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="@OnAddRecipe">
            Add
        </FluentButton>
    </div>
    <div class="d-flex justify-content-end align-items-center mb-1">
        <FluentSearch Placeholder="Search sub category..." Icon="Search" IconPosition="IconPosition.Start"
            @bind-Value=searchTerm @bind-Value:after=OnSearchRecipe Immediate=true />
    </div>
    @if (recipeMastList == null)
    {
        <TableLoader />
    }
    else
    {

        <div class="border rounded" style="height: 450px; overflow:auto;">
            <FluentDataGrid Items="@recipeMastList" GenerateHeader="GenerateHeaderOption.Sticky" AutoFit="true">
                <TemplateColumn Title="Actions" Align="@Align.Start" Width="100px">
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                                  OnClick="@(() => DeleteRecipe(context))" />
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                                  OnClick="@(() =>EditRecipe(context))" />
                </TemplateColumn>
                <PropertyColumn Property="@(c => c.RecipeId)" Sortable="true" title="Recipe Code" />
                <PropertyColumn Property="@(c => c.RecipeName)" Sortable="true" title="Recipe" />
                <PropertyColumn Property="@(c => c.Profile)" Sortable="true" title="Profile" />
                <PropertyColumn Property="@(c => c.RecipeCategories)" Sortable="true" title="Category" />
                <PropertyColumn Property="@(c => c.TotalCost)" Sortable="true" title="Cost" />
                @* <PropertyColumn Property="@(c => c.AdjustedCost)" Sortable="true" title="Adjusted Cost" /> *@
                <PropertyColumn Property="@(c => $"{c.CreatedAt.ToShortDateString()} by {c.Username}")" Sortable="true" title="Created At" />

            </FluentDataGrid>
        </div>


    }
</FluentCard>

@code {
    private IQueryable<RecipeMasterDto> recipeMastList;
    private IQueryable<RecipeMasterDto> originalRecipeMastList;
    string errorMessage = string.Empty;
    string searchTerm = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            var userId = user?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            var userRole = user?.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;

            ApiResponse<List<RecipeMasterDto>> response;

            // Check user role and decide whether to pass the user ID or not
            if (userRole != "Admin" )
            {
                var id = Convert.ToInt32(userId);
                response = await recipeMasterService.GetAllRecipeMasters(id);
            }
            else
            {
                response = await recipeMasterService.GetAllRecipeMasters();
            }

            // Handle the API response
            if (response.Success)
            {
                recipeMastList = response.Data.AsQueryable();
                originalRecipeMastList = recipeMastList;
            }
            else
            {
                errorMessage = response.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            // Handle potential errors
            errorMessage = "An error occurred while initializing the data.";
            Console.WriteLine(ex.Message);
        }
    }


    private void OnAddRecipe()
    {
        navigationManager.NavigateTo("/recipe/add");
    }
    private void EditRecipe(RecipeMasterDto context)
    {
        navigationManager.NavigateTo($"/recipe/edit/{context.RecipeId}");
    }

    private async Task DeleteRecipe(RecipeMasterDto context)
    {
        var response = await recipeMasterService.DeleteRecipeMaster(context.RecipeId);
        if (response.Success)
        {
            ToastService.ShowSuccess("Recipe deleted successfully");
        }
        else
        {
            ToastService.ShowError(response.ErrorMessage);
        }
        // remove the deleted item from the list
        recipeMastList = recipeMastList.Where(c => c.RecipeId != context.RecipeId).AsQueryable();
        originalRecipeMastList = originalRecipeMastList.Where(c => c.RecipeId != context.RecipeId).AsQueryable();

    }

    public void OnSearchRecipe()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            recipeMastList = originalRecipeMastList;
        }
        else
        {
            recipeMastList = originalRecipeMastList.Where(c =>
            c.RecipeName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            c.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            c.Profile.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            c.RecipeCategories.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            c.RecipeId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).AsQueryable();
        }
    }

}