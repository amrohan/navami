@page "/recipe/add"
@page "/recipe/edit/{RecipeId:guid}"

@attribute [Authorize]

@using System.Security.Claims
@using Microsoft.FluentUI.AspNetCore.Components
@using System.Text.Json;


@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject RecipeMasterService recipeMasterService
@inject CategoryMasterService categoryService
@inject SubCategoryMasterService subCategoryService
@inject RawMaterialService rawMaterialService
@inject RecipeCategoryService recipeCategoryService
@inject RecipeCategoryMappingService recipeCategoryMappingService
@inject RawMaterialUsageService rawMaterialUsageService
@inject IToastService ToastService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@if(warnMessage != String.Empty){
    <div class="alert alert-warning fst-italic" role="alert">
        <i class="bi bi-exclamation-triangle"></i>  @warnMessage
</div>
}

<FluentCard Width="100%" Height="900px" AreaRestricted="false">

    <div class="d-flex justify-content-between align-items-center">
        <h3 class="fs-5">@(RecipeId != Guid.Empty ? "Update Recipe" : "New Recipe ")</h3>
    </div>

    <div class="container text-start">
        <div class="row row-cols-3 align-content-center">
            @* <div class="col">
            <FluentTextField Label="Recipe Code" @bind-Value="recipeMasterDto.RecipeCode" Placeholder=""
            Class="w-100" ReadOnly=true />
            </div> *@
            <div class="col">
                <FluentTextField Label="Recipe Name" @bind-Value="recipeMasterDto.RecipeName"
                                 Placeholder="Enter recipe name" Class="w-100" />
            </div>
            <div class="col">
                <FluentTextField Label="Profile" @bind-Value="recipeMasterDto.Profile" Placeholder="Enter profile"
                                 Class="w-100" />
            </div>
            <div class="col">
                <FluentAutocomplete TOption="RecipeCategoryDto" Label="Recipe Category" OnOptionsSearch="OnRecipeSearch"
                                    Placeholder="Select recipe category" Virtualize="true"
                                    OptionText="@(item => item.RecipeCategoryName)" MaximumSelectedOptions=20 Width="350px"
                                    @bind-SelectedOptions="@selectedRecipeCategory" />


            </div>
        </div>
        <div class="row row-cols-4 align-content-center mt-4">
           @*   <div class="col">
                 <FluentSelect Height="300px" TOption="CategoryDto" Items="@categoryList"
                               @bind-Value="rawMaterialUsageDto.CategoryName" Label="Category" Placeholder="Select Category"
                               OptionText="@(c => c.CategoryName)" OptionValue="@(c =>c.CategoryName)" Class="w-100"
                               @onchange="OnCategoryChange" />
             </div> *@

            <div class="col">
                <FluentSelect Height="300px" TOption="SubCategoryDto" Items="@subCategoryList"
                              @bind-Value="rawMaterialUsageDto.SubCategoryName" Label="Sub Category" Placeholder="Select Sub Category"
                              OptionText="@(c => c.SubCategoryName)" OptionValue="@(c =>c.SubCategoryName)" Class="w-100"
                              @onchange="OnSubCategoryChange" />
            </div>
            <div class="col">
                <FluentSelect Height="300px" TOption="RawMaterialsDto" Items="@rawMaterialList"
                              @bind-Value="rawMaterialUsageDto.RawMaterialName" Label="Raw Material" Placeholder="Select Raw Material"
                              OptionText="@(c => c.RawMaterialName)" OptionValue="@(c =>c.RawMaterialName)" Class="w-100"
                              @onchange="OnRawMaterialChange">
                              <OptionTemplate>
                                  <div class="d-flex justify-content-start align-items-center gap-1">
                            @context.RawMaterialCode
                            <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Presentation" Style="height: 20px; background-color:black" />
                            @context.RawMaterialName

                        </div>
                                 
                              </OptionTemplate>
                </FluentSelect>

            </div>
            <div class="col">
                <FluentNumberField Label="Cost" @bind-Value="rawMaterialDto.Price" Placeholder="Enter quantity"
                                   Class="w-100" ReadOnly="true" />
            </div>
            <div class="col">
                <FluentNumberField Label="Quantity" @bind-Value="rawMaterialUsageDto.Quantity" Placeholder="Enter quantity" Class="w-100" @oninput="ValidateDecimalPlaces" />
                @if (!isValid)
                {
                    <div class="text-danger" style="font-size:smaller">Please enter a value with up to four decimal places.</div>
                }
            </div>
            <div class="col">
                <FluentButton Appearance="Appearance.Accent" OnClick="@OnAddRawMaterial" Class="w-25 mt-4 ml-4" Disabled="@(warnMessage != String.Empty)">
                    Add
                </FluentButton>
            </div>

        </div>
        @* Raw Material Usage use FluentDataGrid *@

        <main class="mt-4">
            <div style="display:flex;justify-content: space-between; align-items: end;font-size: small;">

                <p>
                    Qunatity <span class="fw-bold">
                        @(Math.Round(rawMaterialUsageList.Sum(item => item.Quantity), 2))
                    </span>
                </p>
                <div style="display:flex;justify-content: space-between; align-items: end;font-size: small; gap:10px">
                    <p>
                        Cost
                        <span class="fw-bold">
                            Rs.@(Math.Round(rawMaterialUsageList.Sum(item => item.Cost), 2))
                        </span>
                    </p>
                   @*   <p>
                         Adjusted Cost
                         <span class="fw-bold">
                             @(Math.Round(rawMaterialUsageList.Sum(item => item.Cost) * 1.01m, 2))
                         </span>
                     </p> *@

                </div>
            </div>

            @*<div class="align-content-start border rounded" style="height: 450px; overflow:auto;">
            <FluentDataGrid Items="@rawMaterialUsageList.AsQueryable()"
            GenerateHeader="GenerateHeaderOption.Sticky">
            <PropertyColumn Property="@(u => u.Rmname)" Sortable="true" Title="Raw material" />
            <PropertyColumn Property="@(u => u.CategoryName)" Sortable="true" Title="Category" />
            <PropertyColumn Property="@(u => u.SubCategoryName)" Sortable="true" Title="Sub Category" />
            <PropertyColumn Property="@(u => u.Quantity)" Title=@($"Quantity ({(rawMaterialUsageList.Sum(item => item.Quantity))})") Sortable="true" />
            <PropertyColumn Property="@(u => u.Cost)" Title="@($"Cost (Rs.{(rawMaterialUsageList.Sum(item => item.Cost))})")" Sortable="true" />

            <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
            OnClick="@(()=>OnEditRawMaterialUsage(context))" />
            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
            OnClick="@(() => OnDeleteRawMaterial(context))" />
            </TemplateColumn>
            </FluentDataGrid>
            </div> *@
            <div class="d-flex justify-content-end align-items-center mb-1">
                <FluentSearch Placeholder="Search sub category..." Icon="Search" IconPosition="IconPosition.Start"
                              @bind-Value=searchTerm @bind-Value:after=OnSearchRmUsage Immediate=true />
            </div>
            <div class="align-content-start border rounded mt-4" style="height: 450px; overflow:auto;">
                <FluentDataGrid Items="@rawMaterialUsageList.AsQueryable()" GenerateHeader="GenerateHeaderOption.Sticky">
                    <TemplateColumn Title="Actions" Align="@Align.Start" Width="100px">
                        <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                                      OnClick="@(() => OnDeleteRawMaterial(context))" Disabled="@(warnMessage != String.Empty)" />
                        <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                                      OnClick="@(() => OnEditRawMaterialUsage(context))" Disabled="@(warnMessage != String.Empty)" />
                    </TemplateColumn>
                    <PropertyColumn Property="@(u => u.RawMaterialName)" Sortable="true" Title="Raw material" />
                     @* <PropertyColumn Property="@(u => u.CategoryName)" Sortable="true" Title="Category" /> *@
                      <PropertyColumn Property="@(u => u.SubCategoryName)" Sortable="true" Title="Sub Category" />
                    <PropertyColumn Property="@(u => u.Quantity)" Sortable="true" Title="Quantity" />
                    <PropertyColumn Property="@(u => u.Cost)" Title="@($"Cost (Rs.{(rawMaterialUsageList.Sum(item => item.Cost))})")" Sortable="true" />

             
                </FluentDataGrid>
            </div>

        </main>
        @* save btn *@
        <div class="d-flex justify-content-between align-items-start w-100 mt-2">
            <p class="text-danger" style="font-size: small; margin-left: 1rem; margin-top: 0.5rem;">@errorMessage</p>
            <FluentButton Appearance="Appearance.Accent" OnClick="@OnSaveRecipe" Disabled="@(warnMessage != String.Empty)">Save Recipe</FluentButton>
        </div>

    </div>

</FluentCard>

@* pop up *@
@if(isEditing){

<div class="login-overlay">

<FluentCard Width="600px" Height="280px" AreaRestricted=false>
    <h2 class="fs-6 fw-bold m-0 p-0">Edit RM Usage</h2>
    <p class="text-danger fs-6">@errorMessage</p>
        <div class="row row-cols-2 align-content-center">
            <div class="col gy-2">
                <FluentSelect Height="300px" TOption="SubCategoryDto" Items="@subCategoryList"
                              @bind-Value="editingItem.SubCategoryName" Label="Sub Category" Placeholder="Select Sub Category"
                              OptionText="@(c => c.SubCategoryName)" OptionValue="@(c =>c.SubCategoryName)" Class="w-100"
                              @onchange="OnSubCategoryChange" />
            </div>
            <div class="col gy-2">
                <FluentSelect Height="300px" TOption="RawMaterialsDto" Items="@rawMaterialList"
                              @bind-Value="editingItem.RawMaterialName" Label="Raw Material" Placeholder="Select Raw Material"
                              OptionText="@(c => c.RawMaterialName)" OptionValue="@(c =>c.RawMaterialName)" Class="w-100"
                              @onchange="OnRawMaterialChange">
                    <OptionTemplate>
                        <div class="d-flex justify-content-start align-items-center gap-1">
                            @context.RawMaterialCode
                            <FluentDivider Orientation="Orientation.Vertical" Role="DividerRole.Presentation" Style="height: 20px; background-color:black" />
                            @context.RawMaterialName

                        </div>

                    </OptionTemplate>
                </FluentSelect>

            </div>
            <div class="col gy-2">
                <FluentNumberField Label="Cost" @bind-Value="rawMaterialDto.Price" Placeholder="Enter quantity"
                                   Class="w-100" ReadOnly="true" />
            </div>
            <div class="col gy-2">
                <FluentNumberField Label="Quantity" @bind-Value="editingItem.Quantity" Placeholder="Enter quantity" Class="w-100" />
            </div>
            <div class="col text-end col-6 w-100">
                <FluentButton Appearance="Appearance.Outline" OnClick="@OnCancelEdit" Class="w-25 mt-4 ml-4" Disabled="@(warnMessage != String.Empty)">
                    Cancel
                </FluentButton>
                    <FluentButton Appearance="Appearance.Accent" OnClick="@OnUpdateRawMaterial" Class="w-25 mt-4 ml-4" Disabled="@(warnMessage != String.Empty)">
                    Save
                </FluentButton>
            </div>
    </div>

</FluentCard>
</div>
}



@code {

    [Parameter]
    public Guid RecipeId { get; set; }
    // list to store RecipeMasterDto item
    private RecipeMasterDto recipeMasterDto = new RecipeMasterDto();

    // list to store RawMaterialUsageDto item
    private List<RawMaterialUsageDto> rawMaterialUsageList = new List<RawMaterialUsageDto>();
    // list Raw Material
    private RawMaterialUsageDto rawMaterialUsageDto = new RawMaterialUsageDto();
    private List<RawMaterialsDto> rawMaterialList = new List<RawMaterialsDto>();
    private RawMaterialsDto rawMaterialDto = new RawMaterialsDto();

    // list Recipe Category
    private List<RecipeCategoryDto> recipeCategoryList;
    private RecipeCategoryDto recipeCategoryDto = new RecipeCategoryDto();
    private List<RecipeCategoryDto> previousSelectedRecipeCategory = new List<RecipeCategoryDto>();
    private IEnumerable<RecipeCategoryDto> selectedRecipeCategory = Array.Empty<RecipeCategoryDto>();

    private List<CategoryDto> categoryList = new List<CategoryDto>();
    private List<SubCategoryDto> subCategoryList = new List<SubCategoryDto>();

    private bool isEditing = false;
    private bool canEditRecipe = false;
    private string searchTerm;
    private RawMaterialUsageDto editingItem;
    private bool isValid = true;
    private bool isLoading;
    private string errorMessage = string.Empty;
    private string warnMessage = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var recipeCategoryListRes = await recipeCategoryService.GetRecipeCategoriesAsync();
        var res = await subCategoryService.GetSubCategoryMasterAsync();
        if (res.Success)
        {
            subCategoryList = res.Data;
        }
        else
        {
            errorMessage = res.ErrorMessage;
            ToastService.ShowError(res.ErrorMessage);
        }

        if (recipeCategoryListRes.Success)
        {
            recipeCategoryList = recipeCategoryListRes.Data;
        }
        if (RecipeId != Guid.Empty)
        {
            var response = await recipeMasterService.GetRecipeMasterById(RecipeId);
            if (response.Success)
            {
                recipeMasterDto = response.Data;
                rawMaterialUsageList = recipeMasterDto.RawMaterialUsage;
                previousSelectedRecipeCategory = recipeMasterDto.RecipeCategory.Select(c => new RecipeCategoryDto
                    {
                        RecipeCategoryId = c.RecipeCategoryId,
                        RecipeCategoryName = recipeCategoryList.FirstOrDefault(r => r.RecipeCategoryId ==
                        c.RecipeCategoryId)?.RecipeCategoryName
                    }).ToList();
                var ids = recipeMasterDto.RecipeCategory.Select(c => c.RecipeCategoryId).ToList();
                selectedRecipeCategory = recipeCategoryList.Where(c => ids.Contains(c.RecipeCategoryId));

                if (recipeMasterDto.CreatedAt != null)
                {
                    var createdAt = recipeMasterDto.CreatedAt; // Assuming CreatedAt is of type DateTime
                    var timeDifference = DateTime.UtcNow - createdAt; // Calculate time difference

                    // Check if more than 24 hours have passed
                    if (timeDifference.TotalHours > 24)
                    {
                        canEditRecipe = false; 
                        warnMessage = "You cannot edit this recipe as more than 24 hours have passed since its creation.";
                    }
                    else
                    {
                        canEditRecipe = true; 
                    }
                }

            }
            else
            {
                errorMessage = response.ErrorMessage;
            }

        }
    }

    public async Task OnAddRawMaterial()
    {
        if (recipeMasterDto.RecipeId == Guid.Empty)
        {
            isLoading = true;
            rawMaterialUsageDto.RawMaterialId = rawMaterialDto.RawMaterialId;
            rawMaterialUsageDto.RawMaterialName = rawMaterialDto.RawMaterialName;
            rawMaterialUsageDto.Cost = Math.Round(rawMaterialDto.Price * rawMaterialUsageDto.Quantity, 4);
            rawMaterialUsageList.Add(rawMaterialUsageDto);

            var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            var username = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            OnSaveRecipe();
            return;
        }


        rawMaterialUsageDto.RawMaterialId = rawMaterialDto.RawMaterialId;
        rawMaterialUsageDto.RawMaterialName = rawMaterialDto.RawMaterialName;
        rawMaterialUsageDto.Cost = Math.Round(rawMaterialDto.Price * rawMaterialUsageDto.Quantity, 4);
        rawMaterialUsageDto.RecipeId = recipeMasterDto.RecipeId;
        var res = rawMaterialUsageService.AddRawMaterialUsage(rawMaterialUsageDto);
        if(res.Success){
            rawMaterialUsageDto.RawMaterialUsageId = res.Data.RawMaterialUsageId;
            rawMaterialUsageList.Add(rawMaterialUsageDto);
        ClearForm();

        }
    }

    private void ClearForm()
    {
        rawMaterialDto = new RawMaterialsDto();
        rawMaterialUsageDto = new RawMaterialUsageDto();
    }


    #region new

    public async void OnSaveRecipe()
    {
        isLoading = true;
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var username = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (userId == null)
        {
            errorMessage = "User not found";
            ToastService.ShowError("User not found");
            isLoading = false;
            return;
        }

        // Store the current user info
        recipeMasterDto.UpdatedAt = DateTime.UtcNow;
        recipeMasterDto.Username = username ?? string.Empty;

        // Check if we are updating an existing recipe
        if (recipeMasterDto.RecipeId != Guid.Empty)
        {
            // Existing Recipe: Update logic
            await UpdateExistingRecipe(userId);
        }
        else
        {
            await CreateNewRecipe(userId);
        }

        isLoading = false;
    }
    private async Task UpdateExistingRecipe(string userId)
    {
        recipeMasterDto.RawMaterialUsage = rawMaterialUsageList;

        // Create new RecipeCategoryMappingDtos for the current selection
        var recipeCategoryMappingDtos = selectedRecipeCategory.Select(c => new RecipeCategoryMappingDto
            {
                RecipeId = recipeMasterDto.RecipeId,
                RecipeCategoryId = c.RecipeCategoryId,
            }).ToList();

        // Find removed categories and delete them
        var removedRecipeCategories = previousSelectedRecipeCategory
            .Where(c => !selectedRecipeCategory.Any(sc => sc.RecipeCategoryId == c.RecipeCategoryId))
            .ToList();

        foreach (var removedCategory in removedRecipeCategories)
        {
            await recipeMasterService.DeleteRecipeCategoryMapping(recipeMasterDto.RecipeId, removedCategory.RecipeCategoryId);
        }

        // Update the recipe with new categories
        recipeMasterDto.RecipeCategory = recipeCategoryMappingDtos;

        // Call update service
        var response = await recipeMasterService.UpdateRecipeMaster(recipeMasterDto);

        if (response.Success)
        {
            ToastService.ShowSuccess("Recipe updated successfully");
        }
        else
        {
            errorMessage = response.ErrorMessage;
            ToastService.ShowError(response.ErrorMessage);
        }
    }
    private async Task CreateNewRecipe(string userId)
    {
        // Check for empty selection when adding a new recipe
        if (!selectedRecipeCategory.Any())
        {
            errorMessage = "Please select a recipe category";
            return;
        }

        // Prepare to add a new recipe
        recipeMasterDto.CreatedBy = Guid.Parse(userId);
        recipeMasterDto.CreatedAt = DateTime.UtcNow;
        recipeMasterDto.RawMaterialUsage = rawMaterialUsageList;

        // Create mapping for new categories
        var newRecipeCategoryMappings = selectedRecipeCategory.Select(c => new RecipeCategoryMappingDto
            {
                RecipeId = Guid.NewGuid(), // Temporary ID until saved
                RecipeCategoryId = c.RecipeCategoryId,
            }).ToList();

        recipeMasterDto.RecipeCategory = newRecipeCategoryMappings;

        var addResponse = await recipeMasterService.AddRecipeMaster(recipeMasterDto);

        if (addResponse.Success)
        {
            ToastService.ShowSuccess("Recipe added successfully");
            recipeMasterDto.RecipeId = addResponse.Data.RecipeId;
            navigationManager.NavigateTo($"/recipe/edit/{recipeMasterDto.RecipeId}");
            return; 
        }

        errorMessage = addResponse.ErrorMessage;
        ToastService.ShowError(errorMessage);
    }


    #endregion

    #region methods

    private void ValidateDecimalPlaces(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out var value))
        {
            // Check if the value has more than four decimal places
            var decimalPlaces = BitConverter.GetBytes(decimal.GetBits(value)[3])[2];
            isValid = decimalPlaces <= 4;

            // Update the value only if valid
            if (isValid)
            {
                rawMaterialUsageDto.Quantity = value;
            }
        }
        else
        {
            isValid = false; // Invalid input
        }
    }

    public async Task OnDeleteRawMaterial(RawMaterialUsageDto rawMaterialUsageDto)
    {
        if (rawMaterialUsageDto.RawMaterialUsageId != Guid.Empty)
        {
            var response = await rawMaterialUsageService.DeleteRawMaterialUsage(rawMaterialUsageDto.RawMaterialUsageId);
            if (response.Success)
            {
                ToastService.ShowSuccess("Raw Material deleted successfully");
            }
            else
            {
                errorMessage = response.ErrorMessage;
                ToastService.ShowError(response.ErrorMessage);
            }
        }
        rawMaterialUsageList.Remove(rawMaterialUsageDto);

    }

    public void OnRawMaterialChange(ChangeEventArgs e)
    {
        var rawMaterialName = e.Value.ToString();
        rawMaterialDto = rawMaterialList.FirstOrDefault(r => r.RawMaterialName == rawMaterialName);
    }

    public void OnRecipeSearch(OptionsSearchEventArgs<RecipeCategoryDto> e)
    {
        if (!string.IsNullOrEmpty(e.Text))
        {
            e.Items = recipeCategoryList
            .Where(c => c.RecipeCategoryName
            .IndexOf(e.Text, StringComparison.OrdinalIgnoreCase) >= 0)
            .ToList();
        }
        else
        {
            e.Items = recipeCategoryList.ToList();
        }
    }

    private void OnSubCategoryChange(ChangeEventArgs e)
    {
        try
        {
            if (e.Value == null)
            {
                return;
            }

            var subCategory = e.Value.ToString();
            var subCategoryItem = subCategoryList.FirstOrDefault(c => c.SubCategoryName == subCategory);

            if (subCategoryItem == null)
            {
                return;
            }

            var subCategoryId = subCategoryItem.SubCategoryId;
            var response = rawMaterialService.GetRawMaterialBySubCategory(subCategoryId);

            if (response.Success)
            {
                rawMaterialList = response.Data;
                rawMaterialUsageDto.RawMaterialName = string.Empty;
                rawMaterialDto.Price = 0;
            }
            else
            {
                errorMessage = response.ErrorMessage;
                ToastService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            ToastService.ShowError(errorMessage);
        }
    }

    #endregion


    private void OnSaveChanges(RawMaterialUsageDto item)
    {     
        isEditing = false;
    }

    private void OnSearchRmUsage()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            rawMaterialUsageList = recipeMasterDto.RawMaterialUsage;
        }
        else
        {
            rawMaterialUsageList = recipeMasterDto.RawMaterialUsage.Where(c =>
            c.RawMaterialName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            c.CategoryName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            c.SubCategoryName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }


    #region Edit RM usage pop
    private void OnEditRawMaterialUsage(RawMaterialUsageDto item)
    {
        isEditing = true; 
        var subCategoryItem = subCategoryList.FirstOrDefault(c => c.SubCategoryName == item.SubCategoryName);

        if (subCategoryItem == null)
        {
            return;
        }
        var res = rawMaterialService.GetRawMaterialBySubCategory(subCategoryItem.SubCategoryId);
        if (res.Success)
        {
            rawMaterialList = res.Data;
            rawMaterialDto.Price = rawMaterialList.FirstOrDefault(c => c.RawMaterialName == item.RawMaterialName)?.Price ?? 0m;
            editingItem = item;
        }

    }

    private void OnCancelEdit()
    {
        isEditing = false;
        editingItem = null;
    }

    public void OnUpdateRawMaterial()
    {
        // Calculate the cost based on the price and quantity
        editingItem.Cost = Math.Round(rawMaterialDto.Price * editingItem.Quantity, 4);

        // Check if the editing item exists in the list
        var existingItemIndex = rawMaterialUsageList.FindIndex(item => item.RawMaterialUsageId == editingItem.RawMaterialUsageId); // Assuming each item has a unique Id

        if (existingItemIndex >= 0)
        {
            // Update the existing item
            rawMaterialUsageList[existingItemIndex] = editingItem; // Update with the modified editingItem
        }
        else
        {
            // If the item doesn't exist, you may want to add it instead or handle it as needed
            rawMaterialUsageList.Add(editingItem);
        }

        ClearForm(); 
        isEditing = false;
        editingItem = null;

    }

    // Change events
    private void OnEditSubCategoryChange(ChangeEventArgs e)
    {
        try
        {
            if (e.Value == null)
            {
                return;
            }

            var subCategory = e.Value.ToString();
            var subCategoryItem = subCategoryList.FirstOrDefault(c => c.SubCategoryName == subCategory);

            if (subCategoryItem == null)
            {
                return;
            }

            var subCategoryId = subCategoryItem.SubCategoryId;
            var response = rawMaterialService.GetRawMaterialBySubCategory(subCategoryId);

            if (response.Success)
            {
                rawMaterialList = response.Data;
                rawMaterialUsageDto.RawMaterialName = string.Empty;
                rawMaterialDto.Price = 0;
            }
            else
            {
                errorMessage = response.ErrorMessage;
                ToastService.ShowError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            ToastService.ShowError(errorMessage);
        }
    }
    public void OnEditRawMaterialChange(ChangeEventArgs e)
    {
        var rawMaterialName = e.Value.ToString();
        rawMaterialDto.Price = rawMaterialList.FirstOrDefault(c => c.RawMaterialName == rawMaterialName)?.Price ?? 0m;

    }
   #endregion


}