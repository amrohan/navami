@page "/users"
@using Microsoft.FluentUI.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using navami.Services
@using navami.Models
@inject UserService userService
@inject NavigationManager navigationManager

@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<FluentCard Width="100%" Height="600px">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fs-4">Users</h3>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="@AddUser">
            Add User
        </FluentButton>
    </div>
    <div class="d-flex justify-content-end align-items-center mb-1">
        <FluentSearch Placeholder="Search users..." Icon="Search" IconPosition="IconPosition.Start"
                      @bind-Value=searchTerm @bind-Value:after=SearchUsers Immediate=true />
    </div>

    @if (users == null)
    {
        <TableLoader />
    }
    else
    {
        <div style="height: 450px; overflow:auto;" class="border rounded">
            <FluentDataGrid Items="@users" GenerateHeader="GenerateHeaderOption.Sticky">
                <PropertyColumn Property="@(u => u.Username)" Sortable="true" />
                <PropertyColumn Property="@(u => u.Role)" Sortable="true" />
                <PropertyColumn Property="@(u => u.Mobile)" Sortable="true" />
                <PropertyColumn Property="@(u => u.Email)" Sortable="true" />
                <PropertyColumn Property="@(u => (u.IsDeactivated ?? false) ? "Deactivated" : "Active")" title="Account Status"
                                Sortable="true" />
                <TemplateColumn Title="Actions" Align="@Align.End">
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                                  OnClick="@(()=>EditUser(context))" />
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                                  OnClick="@(() => DeleteUser(context))" />
                </TemplateColumn>
            </FluentDataGrid>
        </div>
    }
</FluentCard>


@code {
    private IQueryable<UserDto> users;
    private IQueryable<UserDto> originalUsers;
    string errorMessage = string.Empty;
    string searchTerm = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var response = await userService.GetAllUsersAsync();
        if (response.Success)
        {
            users = response.Data.AsQueryable();
        }
        else
        {
            errorMessage = response.ErrorMessage;
            Console.WriteLine(response.ErrorMessage);
        }

    }

    // navigate to add user page
    private void AddUser()
    {
        navigationManager.NavigateTo("/adduser");
    }

    // navigate to edit user page
    private void EditUser(UserDto context)
    {
        navigationManager.NavigateTo($"/adduser/{context.UserId}");
    }

    // delete user
    private async Task DeleteUser(UserDto context)
    {
        var response = await userService.DeleteUserAsync(context.UserId);
        if (response.Success)
        {

            users = users.Where(u => u.UserId != context.UserId).AsQueryable();
            Console.WriteLine("User deleted successfully");
        }
        else
        {
            errorMessage = response.ErrorMessage;
            Console.WriteLine(response.ErrorMessage);
        }
    }

    private void SearchUsers()
    {
        if (originalUsers == null)
        {
            // Store the original query
            originalUsers = users;
        }

        if (string.IsNullOrEmpty(searchTerm))
        {
            // Reset to the original query when search term is cleared
            users = originalUsers;
        }
        else
        {
            // Apply filtering on the original query
            users = originalUsers.Where(u => u.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            || u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }
    }

}