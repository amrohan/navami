@page "/recipe-category"
@using Microsoft.FluentUI.AspNetCore.Components
@using navami.Services
@using navami.Models
@inject NavigationManager navigationManager

@inject RecipeCategoryService recipeCategoryService
@rendermode InteractiveServer


<PageTitle>Recepies</PageTitle>

<FluentCard Width="100%" Height="600px">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fs-4">Recipe Category</h3>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="@AddRecipe">
            Add Recipe
        </FluentButton>
    </div>

    @if (recipes == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="d-flex justify-content-end align-items-center mb-1">
            <FluentSearch Placeholder="Search users..." Icon="Search" IconPosition="IconPosition.Start"
                @bind-Value=searchTerm @bind-Value:after=SearchRecipe Immediate=true />
        </div>

        <div style="height: 450px; overflow:auto;" class="border rounded">
            <FluentDataGrid Items="@recipes" GenerateHeader="GenerateHeaderOption.Sticky">
                <PropertyColumn Property="@(u => u.RecipeCategoryName)" Sortable="true" title="Recipe Category" />
                <TemplateColumn Title="Actions" Align="@Align.End">
                    <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())"
                        OnClick="@(()=>EditRecipeCategory(context))" />
                    <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())"
                        OnClick="@(() => DeleteRecipeCategory(context))" />
                </TemplateColumn>
            </FluentDataGrid>
        </div>

    }



</FluentCard>


@code {
    private IQueryable<RecipeCategoryDto> recipes;
    private IQueryable<RecipeCategoryDto> originalRecipes;
    string errorMessage = string.Empty;
    string searchTerm = string.Empty;
    protected override void OnInitialized()
    {
        var response = recipeCategoryService.GetRecipeCategories();
        if (response.Success)
        {
            recipes = response.Data.AsQueryable();
            originalRecipes = recipes;
        }
        else
        {
            errorMessage = response.ErrorMessage;
        }
    }

    private void AddRecipe()
    {
        navigationManager.NavigateTo("/recipe-category/add");
    }

    private void EditRecipeCategory(RecipeCategoryDto context)
    {
        navigationManager.NavigateTo($"/recipe-category/edit/{context.RecipeCategoryId}");
    }

    private void DeleteRecipeCategory(RecipeCategoryDto context)
    {
        var response = recipeCategoryService.DeleteRecipeCategory(context.RecipeCategoryId);
        if (response.Success)
        {

            recipes = recipes.Where(r => r.RecipeCategoryId != context.RecipeCategoryId).AsQueryable();
            Console.WriteLine("User deleted successfully");
        }
        else
        {
            errorMessage = response.ErrorMessage;
            Console.WriteLine(response.ErrorMessage);
        }
    }

    private void SearchRecipe()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            recipes = originalRecipes;
        }
        else
        {
            recipes = originalRecipes.Where(r => r.RecipeCategoryName.Contains(searchTerm)).AsQueryable();
        }
    }

}